using System.IO;
using static System.Net.WebRequestMethods;
using System.Threading;

namespace AdventCodeConsole
{
    internal class Program
    {       
        static void Main(string[] args)
        {
            string line;
            int result = 0;
            StreamReader sr = new StreamReader("C:\\Users\\chengdesu\\Desktop\\練習目錄\\AdventOfCode\\2023\\input\\adventofcode_2023_day_4_input.txt");
            line= sr.ReadLine()!+' ';//方便判斷用

            Dictionary<int,int> piles = new Dictionary<int,int>();

            while (line != null && line != " ")//因為有改造所以要再判斷line != " "
            {
                HashSet<int> record = new HashSet<int>();
                int card = -1;
                int listIndex = -1;
                for (int i = 0; i < line.Length; i++)
                {
                    if (isNumeric(line[i]))
                    {
                        int tempHead = i;
                        for (; i < line.Length; i++)
                            if (line[i] == ':')
                            {
                                card = Convert.ToInt32(line.Substring(tempHead, i - tempHead));
                                listIndex = i + 1;
                                break;//空白時break，出來後外層迴圈會自動再i++就部會卡在同一格
                            }
                        break;
                    }                    
                }
                    

                int winningIndex = -1;
                for (int i = listIndex; i < line.Length; i++)
                {
                    if (line[i] == '|')
                    {
                        winningIndex = i + 1;break;
                    }

                    if (isNumeric(line[i]))
                    {
                        int tempHead = i;
                        for (; i < line.Length; i++)                        
                            if (line[i] == ' ')
                            {
                                record.Add(Convert.ToInt32(line.Substring(tempHead, i - tempHead)));
                                break;//空白時break，出來後外層迴圈會自動再i++就部會卡在同一格
                            }                        
                    }
                }

                int count = 0;
                for (int i = winningIndex; i < line.Length; i++)
                {
                    if (isNumeric(line[i]))
                    {
                        int tempHead = i;
                        for (; i < line.Length; i++)
                        {
                            if (line[i] == ' ')
                            {
                                if(record.Contains(Convert.ToInt32(line.Substring(tempHead, i - tempHead))))
                                    count++;
                                break;
                            }
                        }
                    }
                }

                //注意後續中獎會增生
                int pile = -1;
                if (piles.ContainsKey(card))
                {
                    pile = piles[card] + 1;
                    piles.Remove(card);
                }
                else
                    pile = 1;

                for (int i = 1; i <= count; i++)
                {
                    if (piles.ContainsKey(card + i)) piles[card + i]+= pile;
                    else piles[card + i] = pile;
                }

                result += pile;

                line = sr.ReadLine()! + ' ';
            }

            

            sr.Close();
            Console.WriteLine(result);
            Console.ReadLine();
        }

        private static bool isNumeric(char c)
        {
            if (c >= 48 && c <= 57)
                return true;
            return false;
        }
        
        
    }
}