using System.IO;
using static System.Net.WebRequestMethods;
using System.Threading;
using System.Timers;
using System.Linq;
using System.Reflection;

namespace AdventCodeConsole
{
    internal class Program
    {       
        static void Main(string[] args)
        {
            string line;
            StreamReader sr = new StreamReader("C:\\Users\\chengdesu\\Desktop\\練習目錄\\AdventOfCode\\2023\\input\\adventofcode_2023_day_10_input.txt");            
            List<string> pipes = new List<string>();
            List<int[]> flags = new List<int[]>();
            line = sr.ReadLine()!;

            
            int[] current = new int[2] { 0, 0 };
            int[] start = Array.Empty<int>();
            bool haveStart = false;
            while (line != null && !haveStart)
            {
                for (int i = 0; i < line.Length; i++)//檢查column
                {
                    if (line[i] == 'S')
                    {
                        start = new int[2] { current[0],i };
                        haveStart = true;
                        break;
                    }
                }
                current[0]++;//row ++，主要是紀錄起點位置用
                do
                {
                    pipes.Add(line);
                    flags.Add(new int[line.Length]);
                    line = sr.ReadLine()!;
                }
                while (haveStart && line != null);//如果起點找到了就做到完
            }

            Dictionary<char, int[][]> maps = new Dictionary<char, int[][]>()
            {
                //[0][1]對應進入方向，[2][3]對應走出方向，一種pipe會有兩種進出方向
                {'|',new int[][]{new int[]{ 1,0,1,0 },new int[]{ -1,0,-1,0 } } },
                {'-',new int[][]{new int[]{ 0,1,0,1 },new int[]{ 0,-1,0,-1 } } },
                {'L',new int[][]{new int[]{ 1,0,0,1 },new int[]{ 0,-1,-1,0 } } },
                {'J',new int[][]{new int[]{ 1,0,0,-1},new int[]{ 0,1,-1,0 } } },
                {'7',new int[][]{new int[]{ 0,1,1,0 },new int[]{ -1,0,0,-1 } } },
                {'F',new int[][]{new int[]{ 0,-1,1,0 },new int[]{ -1,0,0,1 } } },
                {'.',new int[][]{} }
            };


            //檢查出發方向，記錄起點
            flags[start[0]][start[1]] = 1;
            int[] direction = new int[2];
            for(int i = -1;i <= 1; i++)
            {
                for(int j = -1;j <= 1; j++)
                {
                    if (
                        (i == 0 && j == 0) || //不含0,0
                        (i != 0 && j != 0) || //因為只能走上下左右，斜方向不能走
                        start[0] + i < 0 ||   //確認邊界
                        start[0] + i >= pipes.Count ||
                        start[1] + j < 0 ||
                        start[1] + j >= pipes[0].Length
                        ) continue;

                    char pipe = pipes[start[0] + i][start[1] + j];
                    int[][] map = maps[pipe];

                    //確認pipe同時要確認進入方向可以進入
                    if (pipe != '.' && (
                        (map[0][0] == i && map[0][1] == j) ||
                         (map[1][0] == i && map[1][1] == j)
                        ))
                    {
                        current[0] = start[0];
                        current[1] = start[1];
                        direction[0] += i;
                        direction[1] += j;
                    }
                    if (!(direction[0] == 0 && direction[1] == 0)) break;
                }
                if (!(direction[0] == 0 && direction[1] == 0)) break;
            }

            //確認方向開始計步，走到結束
            int steps = 0;            
            
            while (true)
            {
                current[0] += direction[0];
                current[1] += direction[1];
                if (flags[current[0]][current[1]] == 1) break;//確認已走一圈
                
                steps++;//沒走過就計數和紀錄走過
                flags[current[0]][current[1]] = 1;

                int[][] map = maps[pipes[current[0]][current[1]]];

                if (map[0][0] == direction[0] && map[0][1] == direction[1])
                {
                    direction[0] = map[0][2];
                    direction[1] = map[0][3];
                }
                else
                {
                    direction[0] = map[1][2];
                    direction[1] = map[1][3];
                }
            }

            sr.Close();
            Console.WriteLine(steps/2 + (steps%2==0?0:1));
            Console.ReadLine();
            //硬寫陣列寫到頭殼爆裂
        }

        private static bool isNumeric(char c)
        {
            if (c >= 48 && c <= 57)
                return true;
            return false;
        }

        private static long GCD(long num1, long num2)
        {
            long min = 0;
            long max = 0;
            long maxModMin = 0;
            min = Math.Min(num1, num2);
            max = Math.Max(num1, num2);
            maxModMin = max % min;
            return maxModMin > 0 ? GCD(min, maxModMin) : min;
        }

        private static long LCM(long num1, long num2)
        {
            return num1 * num2 / GCD(num1, num2);
        }

        //就...很不好說，就是要一個個去確認題目規律已陷入循環，但一般的逐步根本看不出來，下面的討論友幫忙整理規律，但說實話一定是額外花很多時間統計，除非已有經驗，如果是死題，可能會因此永遠無解
        //https://www.reddit.com/r/adventofcode/comments/18dg1hw/2023_day_8_part_2_about_the_correctness_of_a/
        //https://www.reddit.com/r/adventofcode/comments/18dfpub/2023_day_8_part_2_why_is_spoiler_correct/
    }
}